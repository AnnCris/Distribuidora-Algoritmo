#!/usr/bin/env python3
"""
SISTEMA DE RUTAS DE DISTRIBUCI√ìN CON CLUSTERING
An√°lisis hiperlocal de ubicaciones de clientes y optimizaci√≥n de rutas

Reglas de distribuci√≥n:
- Lunes y Jueves: LA PAZ
- Martes y Viernes: EL ALTO
- Pizzer√≠as: siempre en la TARDE
"""

import pandas as pd
import numpy as np
import folium
from folium import plugins
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from sklearn.cluster import KMeans, DBSCAN
from sklearn.preprocessing import StandardScaler
from geopy.geocoders import Nominatim
from geopy.distance import geodesic
import warnings
import os
from datetime import datetime, timedelta
import json

warnings.filterwarnings('ignore')

class SistemaRutasDistribucion:
    def __init__(self, archivo_excel="dataset inicial.xlsx"):
        self.archivo_excel = archivo_excel
        self.df_clientes = None
        self.coordenadas_clientes = None
        self.clusters_rutas = None

        # Reglas de distribuci√≥n
        self.reglas_distribucion = {
            'LA PAZ': ['Lunes', 'Jueves'],
            'EL ALTO': ['Martes', 'Viernes'],
            'PIZZERIA_TURNO': 'TARDE'
        }

        # Coordenadas base para Bolivia (La Paz y El Alto)
        self.coordenadas_base = {
            'LA PAZ': {'lat': -16.5000, 'lon': -68.1193},
            'EL ALTO': {'lat': -16.5040, 'lon': -68.1644},
            'COPACABANA': {'lat': -16.1661, 'lon': -69.0864},
            'CARANAVI': {'lat': -15.8380, 'lon': -67.5690}
        }

        print("üöõ SISTEMA DE RUTAS DE DISTRIBUCI√ìN INICIALIZADO")
        print("="*60)

    def cargar_datos_excel(self):
        """Carga y procesa los datos del Excel"""
        try:
            print("üìä Cargando datos del Excel...")

            # Leer el Excel
            df = pd.read_excel(self.archivo_excel)

            # Procesar datos de clientes
            clientes_data = []
            for index, row in df.iterrows():
                if pd.notna(row.iloc[1]) and pd.notna(row.iloc[2]):  # Si tiene cliente y tipo de negocio
                    cliente = {
                        'numero': row.iloc[0] if pd.notna(row.iloc[0]) else index,
                        'nombre': str(row.iloc[1]).strip(),
                        'tipo_negocio': str(row.iloc[2]).strip(),
                        'ciudad': str(row.iloc[3]).strip() if pd.notna(row.iloc[3]) else 'Sin especificar',
                        'lugar_entrega': str(row.iloc[4]).strip() if pd.notna(row.iloc[4]) else 'Sin especificar',
                        'turno': str(row.iloc[5]).strip() if pd.notna(row.iloc[5]) else 'Sin especificar'
                    }
                    clientes_data.append(cliente)

            self.df_clientes = pd.DataFrame(clientes_data)

            # Limpiar y estandarizar ciudades
            self.df_clientes['ciudad_limpia'] = self.df_clientes['ciudad'].str.upper().str.strip()
            self.df_clientes['ciudad_limpia'] = self.df_clientes['ciudad_limpia'].replace({
                'El ALTO': 'EL ALTO',
                'LA PAZ': 'LA PAZ'
            })

            print(f"‚úÖ {len(self.df_clientes)} clientes cargados")
            print(f"üìç Ciudades: {self.df_clientes['ciudad_limpia'].value_counts().to_dict()}")
            print(f"üè¢ Tipos de negocio: {self.df_clientes['tipo_negocio'].nunique()} √∫nicos")

            return True

        except Exception as e:
            print(f"‚ùå Error cargando datos: {e}")
            return False

    def generar_coordenadas_hiperlocales(self):
        """Genera coordenadas hiperlocales para cada cliente"""
        print("\nüó∫Ô∏è Generando coordenadas hiperlocales...")

        coordenadas = []

        for _, cliente in self.df_clientes.iterrows():
            ciudad = cliente['ciudad_limpia']
            lugar_entrega = cliente['lugar_entrega']

            # Obtener coordenadas base de la ciudad
            if ciudad in self.coordenadas_base:
                base_lat = self.coordenadas_base[ciudad]['lat']
                base_lon = self.coordenadas_base[ciudad]['lon']

                # Generar variaci√≥n hiperlocal basada en el lugar de entrega
                # Usar hash del lugar para generar posiciones consistentes
                hash_lugar = hash(lugar_entrega) % 10000

                # Crear dispersi√≥n realista (aprox 5-15 km de radio)
                radio_km = np.random.uniform(2, 12)
                angulo = (hash_lugar / 10000) * 2 * np.pi

                # Convertir a coordenadas (aproximaci√≥n)
                lat_offset = (radio_km / 111) * np.cos(angulo)  # 1 grado lat ‚âà 111 km
                lon_offset = (radio_km / (111 * np.cos(np.radians(base_lat)))) * np.sin(angulo)

                lat_final = base_lat + lat_offset
                lon_final = base_lon + lon_offset

                coordenadas.append({
                    'numero': cliente['numero'],
                    'nombre': cliente['nombre'],
                    'tipo_negocio': cliente['tipo_negocio'],
                    'ciudad': ciudad,
                    'lugar_entrega': lugar_entrega,
                    'turno': cliente['turno'],
                    'lat': lat_final,
                    'lon': lon_final,
                    'dia_distribucion': self._asignar_dia_distribucion(ciudad, cliente['tipo_negocio'], cliente['turno'])
                })
            else:
                print(f"‚ö†Ô∏è Ciudad {ciudad} no encontrada en coordenadas base")

        self.coordenadas_clientes = pd.DataFrame(coordenadas)

        print(f"‚úÖ {len(self.coordenadas_clientes)} coordenadas generadas")
        print("üìç Distribuci√≥n por ciudad:")
        for ciudad, count in self.coordenadas_clientes['ciudad'].value_counts().items():
            print(f"   {ciudad}: {count} clientes")

        return self.coordenadas_clientes

    def _asignar_dia_distribucion(self, ciudad, tipo_negocio, turno):
        """Asigna d√≠a de distribuci√≥n seg√∫n reglas de negocio"""
        dias_ciudad = []

        # Asignar d√≠as seg√∫n ciudad
        if ciudad == 'LA PAZ':
            dias_ciudad = ['Lunes', 'Jueves']
        elif ciudad == 'EL ALTO':
            dias_ciudad = ['Martes', 'Viernes']
        else:
            # Otras ciudades en d√≠as espec√≠ficos
            dias_ciudad = ['Mi√©rcoles', 'S√°bado']

        # Determinar turno
        turno_asignado = 'TARDE'
        if 'PIZZERIA' in tipo_negocio.upper():
            turno_asignado = 'TARDE'  # Pizzer√≠as siempre en tarde
        elif turno == 'MA√ëANA':
            turno_asignado = 'MA√ëANA'

        # Seleccionar d√≠a (alternando para balancear carga)
        dia_seleccionado = dias_ciudad[hash(str(ciudad + tipo_negocio)) % len(dias_ciudad)]

        return f"{dia_seleccionado} - {turno_asignado}"

    def realizar_clustering_geografico(self, n_clusters_por_ciudad=3):
        """Realiza clustering geogr√°fico por ciudad"""
        print(f"\nüéØ Realizando clustering geogr√°fico ({n_clusters_por_ciudad} clusters por ciudad)...")

        if self.coordenadas_clientes is None:
            print("‚ùå Primero generar coordenadas")
            return False

        clusters_finales = []

        for ciudad in self.coordenadas_clientes['ciudad'].unique():
            print(f"\nüìç Procesando {ciudad}...")

            clientes_ciudad = self.coordenadas_clientes[
                self.coordenadas_clientes['ciudad'] == ciudad
                ].copy()

            if len(clientes_ciudad) < n_clusters_por_ciudad:
                print(f"   ‚ö†Ô∏è Solo {len(clientes_ciudad)} clientes, usando 1 cluster")
                clientes_ciudad['cluster'] = 0
                clientes_ciudad['cluster_global'] = f"{ciudad}_Ruta_1"
            else:
                # Preparar datos para clustering
                X = clientes_ciudad[['lat', 'lon']].values
                scaler = StandardScaler()
                X_scaled = scaler.fit_transform(X)

                # Aplicar K-means
                kmeans = KMeans(n_clusters=n_clusters_por_ciudad, random_state=42, n_init=10)
                clusters = kmeans.fit_predict(X_scaled)

                clientes_ciudad['cluster'] = clusters
                clientes_ciudad['cluster_global'] = [
                    f"{ciudad}_Ruta_{cluster+1}" for cluster in clusters
                ]

                print(f"   ‚úÖ {n_clusters_por_ciudad} clusters creados")
                for cluster_id in range(n_clusters_por_ciudad):
                    count = sum(clusters == cluster_id)
                    print(f"      Ruta {cluster_id+1}: {count} clientes")

            clusters_finales.append(clientes_ciudad)

        self.clusters_rutas = pd.concat(clusters_finales, ignore_index=True)

        print(f"\n‚úÖ Clustering completado:")
        print(f"   üìä Total rutas: {self.clusters_rutas['cluster_global'].nunique()}")
        print(f"   üöõ Promedio clientes por ruta: {len(self.clusters_rutas) / self.clusters_rutas['cluster_global'].nunique():.1f}")

        return True

    def crear_mapa_interactivo(self):
        """Crea mapa interactivo con rutas de distribuci√≥n"""
        print("\nüó∫Ô∏è Creando mapa interactivo...")

        if self.clusters_rutas is None:
            print("‚ùå Primero realizar clustering")
            return None

        # Crear mapa centrado en La Paz
        centro_lat = self.coordenadas_base['LA PAZ']['lat']
        centro_lon = self.coordenadas_base['LA PAZ']['lon']

        mapa = folium.Map(
            location=[centro_lat, centro_lon],
            zoom_start=10,
            tiles='OpenStreetMap'
        )

        # Colores para diferentes rutas
        colores_rutas = [
            '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FECA57',
            '#FF9F43', '#D63031', '#74B9FF', '#00B894', '#FDCB6E'
        ]

        # Colores por d√≠a de distribuci√≥n
        colores_dias = {
            'Lunes': '#FF6B6B',
            'Martes': '#4ECDC4',
            'Mi√©rcoles': '#45B7D1',
            'Jueves': '#96CEB4',
            'Viernes': '#FECA57',
            'S√°bado': '#FF9F43'
        }

        # Agregar marcadores por ruta
        rutas_unicas = self.clusters_rutas['cluster_global'].unique()

        for i, ruta in enumerate(rutas_unicas):
            clientes_ruta = self.clusters_rutas[self.clusters_rutas['cluster_global'] == ruta]
            color_ruta = colores_rutas[i % len(colores_rutas)]

            # Obtener d√≠a de distribuci√≥n
            dia_ejemplo = clientes_ruta['dia_distribucion'].iloc[0].split(' - ')[0]
            color_dia = colores_dias.get(dia_ejemplo, '#95A5A6')

            # Crear grupo de marcadores para esta ruta
            grupo_ruta = folium.FeatureGroup(name=f"{ruta} ({len(clientes_ruta)} clientes)")

            for _, cliente in clientes_ruta.iterrows():
                # Icono seg√∫n tipo de negocio
                if 'PIZZERIA' in cliente['tipo_negocio']:
                    icono = 'cutlery'
                    color_icono = 'red'
                elif 'FRIAL' in cliente['tipo_negocio']:
                    icono = 'shopping-cart'
                    color_icono = 'blue'
                elif 'RESTAURANTE' in cliente['tipo_negocio']:
                    icono = 'cutlery'
                    color_icono = 'green'
                else:
                    icono = 'home'
                    color_icono = 'gray'

                # Crear popup con informaci√≥n
                popup_text = f"""
                <b>{cliente['nombre']}</b><br>
                üè¢ {cliente['tipo_negocio']}<br>
                üìç {cliente['lugar_entrega']}<br>
                üóìÔ∏è {cliente['dia_distribucion']}<br>
                üöõ {ruta}
                """

                folium.Marker(
                    location=[cliente['lat'], cliente['lon']],
                    popup=folium.Popup(popup_text, max_width=250),
                    tooltip=f"{cliente['nombre']} - {cliente['tipo_negocio']}",
                    icon=folium.Icon(
                        color=color_icono,
                        icon=icono,
                        prefix='fa'
                    )
                ).add_to(grupo_ruta)

            # Agregar l√≠neas conectando la ruta
            if len(clientes_ruta) > 1:
                coordenadas_ruta = [[row['lat'], row['lon']] for _, row in clientes_ruta.iterrows()]

                folium.PolyLine(
                    locations=coordenadas_ruta,
                    color=color_ruta,
                    weight=3,
                    opacity=0.7,
                    popup=f"Ruta: {ruta}"
                ).add_to(grupo_ruta)

            mapa.add_child(grupo_ruta)

        # Agregar centros de distribuci√≥n
        for ciudad, coords in self.coordenadas_base.items():
            if ciudad in ['LA PAZ', 'EL ALTO']:
                folium.Marker(
                    location=[coords['lat'], coords['lon']],
                    popup=f"Centro de Distribuci√≥n - {ciudad}",
                    tooltip=f"Centro: {ciudad}",
                    icon=folium.Icon(
                        color='darkred',
                        icon='warehouse',
                        prefix='fa'
                    )
                ).add_to(mapa)

        # Control de capas
        folium.LayerControl().add_to(mapa)

        # Agregar leyenda
        leyenda_html = '''
        <div style="position: fixed; 
                    bottom: 50px; right: 50px; width: 200px; height: 300px; 
                    background-color: white; border:2px solid grey; z-index:9999; 
                    font-size:14px; padding: 10px">
        <h4>üöõ Leyenda de Rutas</h4>
        <p><i class="fa fa-cutlery" style="color:red"></i> Pizzer√≠as</p>
        <p><i class="fa fa-shopping-cart" style="color:blue"></i> Friales</p>
        <p><i class="fa fa-cutlery" style="color:green"></i> Restaurantes</p>
        <p><i class="fa fa-home" style="color:gray"></i> Otros</p>
        <p><i class="fa fa-warehouse" style="color:darkred"></i> Centro Distribuci√≥n</p>
        <br>
        <h5>üìÖ D√≠as de Entrega:</h5>
        <p style="color:#FF6B6B">‚óè Lunes (La Paz)</p>
        <p style="color:#4ECDC4">‚óè Martes (El Alto)</p>
        <p style="color:#96CEB4">‚óè Jueves (La Paz)</p>
        <p style="color:#FECA57">‚óè Viernes (El Alto)</p>
        </div>
        '''
        mapa.get_root().html.add_child(folium.Element(leyenda_html))

        # Guardar mapa
        archivo_mapa = 'mapa_rutas_distribucion.html'
        mapa.save(archivo_mapa)

        print(f"‚úÖ Mapa guardado como: {archivo_mapa}")
        print(f"üìä {len(rutas_unicas)} rutas visualizadas")

        return mapa

    def generar_horarios_distribucion(self):
        """Genera horarios detallados de distribuci√≥n"""
        print("\nüìÖ Generando horarios de distribuci√≥n...")

        if self.clusters_rutas is None:
            print("‚ùå Primero realizar clustering")
            return None

        horarios = {}

        # Agrupar por d√≠a
        for dia in ['Lunes', 'Martes', 'Mi√©rcoles', 'Jueves', 'Viernes', 'S√°bado']:
            clientes_dia = self.clusters_rutas[
                self.clusters_rutas['dia_distribucion'].str.contains(dia)
            ]

            if len(clientes_dia) > 0:
                horarios[dia] = {
                    'ma√±ana': [],
                    'tarde': []
                }

                # Separar por turno
                for turno in ['MA√ëANA', 'TARDE']:
                    clientes_turno = clientes_dia[
                        clientes_dia['dia_distribucion'].str.contains(turno)
                    ]

                    if len(clientes_turno) > 0:
                        # Agrupar por ruta
                        for ruta in clientes_turno['cluster_global'].unique():
                            clientes_ruta = clientes_turno[
                                clientes_turno['cluster_global'] == ruta
                                ]

                            # Calcular tiempo estimado (5 min por cliente + 15 min viaje entre puntos)
                            tiempo_estimado = len(clientes_ruta) * 5 + (len(clientes_ruta) - 1) * 15

                            horarios[dia][turno.lower()].append({
                                'ruta': ruta,
                                'clientes': len(clientes_ruta),
                                'tiempo_estimado_min': tiempo_estimado,
                                'ciudad': clientes_ruta['ciudad'].iloc[0],
                                'lista_clientes': clientes_ruta[['nombre', 'tipo_negocio', 'lugar_entrega']].to_dict('records')
                            })

        # Mostrar horarios
        print("\nüìã HORARIOS DE DISTRIBUCI√ìN:")
        print("="*60)

        for dia, turnos in horarios.items():
            if any(turnos.values()):
                print(f"\nüìÖ {dia.upper()}")
                print("-" * 30)

                for turno, rutas in turnos.items():
                    if rutas:
                        print(f"\nüïê {turno.upper()}:")
                        hora_inicio = "08:00" if turno == "ma√±ana" else "14:00"

                        for i, ruta_info in enumerate(rutas):
                            print(f"   üöõ {ruta_info['ruta']} ({ruta_info['ciudad']})")
                            print(f"      üë• {ruta_info['clientes']} clientes")
                            print(f"      ‚è±Ô∏è {ruta_info['tiempo_estimado_min']} minutos estimados")
                            print(f"      üïê Inicio sugerido: {hora_inicio}")

                            # Calcular siguiente hora
                            hora_inicio = self._calcular_siguiente_hora(hora_inicio, ruta_info['tiempo_estimado_min'])

        return horarios

    def _calcular_siguiente_hora(self, hora_actual, minutos_agregar):
        """Calcula la siguiente hora agregando minutos"""
        from datetime import datetime, timedelta

        hora_obj = datetime.strptime(hora_actual, "%H:%M")
        nueva_hora = hora_obj + timedelta(minutes=minutos_agregar + 30)  # +30 min buffer
        return nueva_hora.strftime("%H:%M")

    def generar_reporte_estadisticas(self):
        """Genera reporte estad√≠stico completo"""
        print("\nüìä GENERANDO REPORTE ESTAD√çSTICO...")

        if self.clusters_rutas is None:
            print("‚ùå Primero realizar clustering")
            return None

        # Estad√≠sticas generales
        total_clientes = len(self.clusters_rutas)
        total_rutas = self.clusters_rutas['cluster_global'].nunique()

        print(f"\nüìà ESTAD√çSTICAS GENERALES:")
        print(f"   üë• Total clientes: {total_clientes}")
        print(f"   üöõ Total rutas: {total_rutas}")
        print(f"   üìç Ciudades atendidas: {self.clusters_rutas['ciudad'].nunique()}")

        # Por ciudad
        print(f"\nüèôÔ∏è DISTRIBUCI√ìN POR CIUDAD:")
        for ciudad, count in self.clusters_rutas['ciudad'].value_counts().items():
            porcentaje = (count / total_clientes) * 100
            print(f"   {ciudad}: {count} clientes ({porcentaje:.1f}%)")

        # Por tipo de negocio
        print(f"\nüè¢ DISTRIBUCI√ìN POR TIPO DE NEGOCIO:")
        for tipo, count in self.clusters_rutas['tipo_negocio'].value_counts().head(5).items():
            porcentaje = (count / total_clientes) * 100
            print(f"   {tipo}: {count} clientes ({porcentaje:.1f}%)")

        # Por d√≠a de distribuci√≥n
        print(f"\nüìÖ DISTRIBUCI√ìN POR D√çA:")
        dias_dist = self.clusters_rutas['dia_distribucion'].str.split(' - ').str[0].value_counts()
        for dia, count in dias_dist.items():
            porcentaje = (count / total_clientes) * 100
            print(f"   {dia}: {count} clientes ({porcentaje:.1f}%)")

        # Eficiencia de rutas
        print(f"\n‚ö° EFICIENCIA DE RUTAS:")
        clientes_por_ruta = self.clusters_rutas.groupby('cluster_global').size()
        print(f"   üìä Promedio clientes por ruta: {clientes_por_ruta.mean():.1f}")
        print(f"   üìà M√°ximo clientes en una ruta: {clientes_por_ruta.max()}")
        print(f"   üìâ M√≠nimo clientes en una ruta: {clientes_por_ruta.min()}")

        return {
            'total_clientes': total_clientes,
            'total_rutas': total_rutas,
            'por_ciudad': self.clusters_rutas['ciudad'].value_counts().to_dict(),
            'por_tipo_negocio': self.clusters_rutas['tipo_negocio'].value_counts().to_dict(),
            'por_dia': dias_dist.to_dict(),
            'clientes_por_ruta': clientes_por_ruta.to_dict()
        }

    def exportar_rutas_excel(self, nombre_archivo="rutas_optimizadas.xlsx"):
        """Exporta las rutas optimizadas a Excel"""
        print(f"\nüì§ Exportando rutas a {nombre_archivo}...")

        if self.clusters_rutas is None:
            print("‚ùå Primero realizar clustering")
            return False

        try:
            with pd.ExcelWriter(nombre_archivo, engine='openpyxl') as writer:
                # Hoja 1: Todas las rutas
                self.clusters_rutas.to_excel(writer, sheet_name='Rutas_Completas', index=False)

                # Hoja 2: Resumen por ruta
                resumen_rutas = self.clusters_rutas.groupby('cluster_global').agg({
                    'nombre': 'count',
                    'ciudad': 'first',
                    'dia_distribucion': 'first',
                    'tipo_negocio': lambda x: ', '.join(x.unique()[:3])
                }).rename(columns={
                    'nombre': 'total_clientes',
                    'tipo_negocio': 'tipos_negocio'
                })
                resumen_rutas.to_excel(writer, sheet_name='Resumen_Rutas')

                # Hoja 3: Por d√≠a
                for dia in ['Lunes', 'Martes', 'Jueves', 'Viernes']:
                    clientes_dia = self.clusters_rutas[
                        self.clusters_rutas['dia_distribucion'].str.contains(dia)
                    ]
                    if len(clientes_dia) > 0:
                        clientes_dia.to_excel(writer, sheet_name=f'Ruta_{dia}', index=False)

            print(f"‚úÖ Rutas exportadas exitosamente")
            return True

        except Exception as e:
            print(f"‚ùå Error exportando: {e}")
            return False

    def ejecutar_analisis_completo(self):
        """Ejecuta el an√°lisis completo del sistema"""
        print("üöõ INICIANDO AN√ÅLISIS COMPLETO DE RUTAS")
        print("="*50)

        # 1. Cargar datos
        if not self.cargar_datos_excel():
            return False

        # 2. Generar coordenadas
        if self.generar_coordenadas_hiperlocales() is None:
            return False

        # 3. Realizar clustering
        if not self.realizar_clustering_geografico(n_clusters_por_ciudad=3):
            return False

        # 4. Crear mapa
        mapa = self.crear_mapa_interactivo()

        # 5. Generar horarios
        horarios = self.generar_horarios_distribucion()

        # 6. Estad√≠sticas
        stats = self.generar_reporte_estadisticas()

        # 7. Exportar a Excel
        self.exportar_rutas_excel()

        print("\nüéâ AN√ÅLISIS COMPLETO FINALIZADO")
        print("="*40)
        print("üìÑ Archivos generados:")
        print("   üó∫Ô∏è mapa_rutas_distribucion.html")
        print("   üìä rutas_optimizadas.xlsx")
        print("\nüí° Pr√≥ximos pasos:")
        print("   1. Abrir el mapa HTML en tu navegador")
        print("   2. Revisar las rutas en el Excel")
        print("   3. Ajustar horarios seg√∫n capacidad de veh√≠culos")

        return True

def main():
    """Funci√≥n principal del sistema"""
    print("üöõ SISTEMA DE RUTAS DE DISTRIBUCI√ìN CON CLUSTERING")
    print("="*60)
    print("üìã REGLAS DE DISTRIBUCI√ìN:")
    print("   üîµ Lunes y Jueves: LA PAZ")
    print("   üü¢ Martes y Viernes: EL ALTO")
    print("   üî¥ Pizzer√≠as: siempre en la TARDE")
    print("="*60)

    # Verificar si existe el archivo Excel
    archivo_excel = "dataset inicial.xlsx"
    if not os.path.exists(archivo_excel):
        print(f"‚ùå Archivo {archivo_excel} no encontrado")
        print("üí° Aseg√∫rate de tener el archivo Excel en la misma carpeta")
        return

    # Crear sistema
    sistema = SistemaRutasDistribucion(archivo_excel)

    # Ejecutar an√°lisis completo
    sistema.ejecutar_analisis_completo()

if __name__ == "__main__":
    main()