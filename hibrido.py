#!/usr/bin/env python3
"""
SISTEMA H√çBRIDO DE RECOMENDACI√ìN DE QUESOS
Combina Random Forest + K-means + Filtrado Colaborativo
Interfaz de consola interactiva con DATOS REALES del Excel
"""

import pandas as pd
import numpy as np
import joblib
import os
import sys
from datetime import datetime, timedelta
import warnings

warnings.filterwarnings('ignore')


class SistemaHibridoQuesos:
    def __init__(self):
        self.usuario_actual = {}
        self.productos_quesos = self._cargar_productos_reales()
        self.tipos_negocio = self._cargar_tipos_negocio_reales()
        self.ciudades = self._cargar_ciudades_reales()

        # Mapeo de productos a categor√≠as de quesos
        self.categorias_quesos = {
            'quesos_frescos': ['bolita', 'fresco'],
            'quesos_semiduros': ['barra', 'cheddar'],
            'quesos_laminados': ['laminado', 'barra laminada'],
            'quesos_artesanales': ['artesanal'],
            'quesos_especiales': ['bloque', 'pvc']
        }

        # Combinaciones por platillo (adaptadas a productos reales)
        self.platillos_quesos = {
            'pizza': ['mozzarella', 'bolita', 'cheddar'],
            'pasta': ['cheddar', 'barra', 'laminado'],
            'ensaladas': ['bolita', 'fresco'],
            'postres': ['fresco', 'bolita'],
            'tabla_quesos': ['cheddar', 'barra', 'artesanal'],
            'gratinados': ['cheddar', 'laminado'],
            'sandwiches': ['cheddar', 'laminado']
        }

    def _cargar_productos_reales(self):
        """Cat√°logo real extra√≠do del Excel"""
        return {
            'Q001': {'nombre': 'SAN JAVIER', 'marca': 'SAN JAVIER', 'categoria': 'BOLITA', 'peso': '420GR',
                     'precio': 58.5},
            'Q002': {'nombre': 'HOLANDESA BOLITA', 'marca': 'HOLANDESA', 'categoria': 'BOLITA', 'peso': '500GR',
                     'precio': 58.5},
            'Q003': {'nombre': 'HOLANDESA BARRA', 'marca': 'HOLANDESA', 'categoria': 'BARRA', 'peso': '3.500KG A 3KG',
                     'precio': 234.0},
            'Q004': {'nombre': 'HOLANDESA CHEDDAR', 'marca': 'HOLANDESA', 'categoria': 'BARRA', 'peso': '3.500KG A 3KG',
                     'precio': 234.0},
            'Q005': {'nombre': 'CRISTY BOLITA', 'marca': 'CRISTY', 'categoria': 'BOLITA', 'peso': '420GR',
                     'precio': 45.0},
            'Q006': {'nombre': 'CRISTY BARRA', 'marca': 'CRISTY', 'categoria': 'BARRA', 'peso': '3.500KG A 3KG',
                     'precio': 180.0},
            'Q007': {'nombre': 'CRISTY LAMINADO', 'marca': 'CRISTY', 'categoria': 'LAMINADO', 'peso': '160GR',
                     'precio': 25.0},
            'Q008': {'nombre': 'CRISTY LAMINADO', 'marca': 'CRISTY', 'categoria': 'LAMINADO', 'peso': '500GR',
                     'precio': 45.0},
            'Q009': {'nombre': 'CRISTY CHEDDAR', 'marca': 'CRISTY', 'categoria': 'LAMINADO', 'peso': '160GR',
                     'precio': 25.0},
            'Q010': {'nombre': 'CRISTY CHEDDAR', 'marca': 'CRISTY', 'categoria': 'LAMINADO', 'peso': '500GR',
                     'precio': 45.0},
            'Q011': {'nombre': 'LA RIBERA', 'marca': 'LA RIBERA', 'categoria': 'BOLITA', 'peso': '420GR',
                     'precio': 58.5},
            'Q012': {'nombre': 'CHIQUITANO', 'marca': 'CHIQUITANO', 'categoria': 'BOLITA', 'peso': '420GR',
                     'precio': 45.0},
            'Q013': {'nombre': 'LA MARAVILLA', 'marca': 'LA MARAVILLA', 'categoria': 'BARRA', 'peso': '3.500KG A 3KG',
                     'precio': 180.0},
            'Q014': {'nombre': 'SANTA ROSA', 'marca': 'SANTA ROSA', 'categoria': 'BARRA', 'peso': '3.500KG A 3KG',
                     'precio': 180.0},
            'Q015': {'nombre': 'QUE QUESITOS', 'marca': 'QUE QUESITOS', 'categoria': 'BOLITA', 'peso': '420KG',
                     'precio': 50.0},
            'Q016': {'nombre': 'EL CORRALITO', 'marca': 'CORRALITO', 'categoria': 'BARRA', 'peso': '3.500KG A 3KG',
                     'precio': 180.0},
            'Q017': {'nombre': 'SAN JAVIER BLOQUE', 'marca': 'SAN JAVIER', 'categoria': 'QUESO ARTESANAL',
                     'peso': '7.500KG A 8.500KG', 'precio': 780.0},
            'Q018': {'nombre': 'CRISTY BARRA LAMINADA', 'marca': 'CRISTY', 'categoria': 'BARRA LAMINADA',
                     'peso': '3.3500KG', 'precio': 50.0},
            'Q019': {'nombre': 'CHIQUITANO PVC', 'marca': 'CHIQUITANO', 'categoria': 'BOLITA', 'peso': '420GR',
                     'precio': 45.0},
            'Q020': {'nombre': 'CRISTY BARRA LAMINADA PVC', 'marca': 'CRISTY', 'categoria': 'BARRA LAMINADA',
                     'peso': '3KG A 3.500KG', 'precio': 180.0}
        }

    def _cargar_tipos_negocio_reales(self):
        """Tipos de negocio reales del Excel"""
        return [
            'FRIAL', 'HAMBURGUESERIA', 'MINIMARKET', 'PASTELERIA',
            'PIZZERIA', 'PUESTO DE MERCADO', 'RESTAURANTE',
            'SALCHIPAPERIA', 'SALTE√ëERIA', 'TIENDA'
        ]

    def _cargar_ciudades_reales(self):
        """Ciudades reales del Excel"""
        return ['EL ALTO', 'LA PAZ', 'COPACABANA', 'CARANAVI']

    def mostrar_bienvenida(self):
        """Muestra mensaje de bienvenida"""
        print("\n" + "=" * 70)
        print("üßÄ SISTEMA H√çBRIDO DE RECOMENDACI√ìN DE QUESOS üßÄ")
        print("   Tecnolog√≠a: Random Forest + K-means + Filtrado Colaborativo")
        print("   üìä DATOS REALES: 20 productos, 10 tipos de negocio, 4 ciudades")
        print("=" * 70)
        print("¬°Bienvenido! Te ayudo a encontrar los quesos perfectos para tu negocio")
        print("-" * 70)

    def recopilar_datos_usuario(self):
        """Recopila informaci√≥n del usuario"""
        print("\nüìù INFORMACI√ìN PERSONAL")
        print("-" * 30)

        self.usuario_actual['nombre'] = input("üë§ Ingresa tu nombre: ").strip().title()
        self.usuario_actual['apellidos'] = input("üë§ Ingresa tus apellidos: ").strip().title()

        print(f"\n¬°Hola {self.usuario_actual['nombre']} {self.usuario_actual['apellidos']}! üëã")

        # Tipo de negocio
        print("\nüè¢ TIPO DE NEGOCIO (datos reales del Excel)")
        print("-" * 45)
        for i, tipo in enumerate(self.tipos_negocio, 1):
            print(f"{i:2d}. {tipo}")

        while True:
            try:
                opcion = int(input(f"\nSelecciona tu tipo de negocio (1-{len(self.tipos_negocio)}): "))
                if 1 <= opcion <= len(self.tipos_negocio):
                    self.usuario_actual['tipo_negocio'] = self.tipos_negocio[opcion - 1]
                    break
                else:
                    print("‚ùå Opci√≥n inv√°lida. Intenta de nuevo.")
            except ValueError:
                print("‚ùå Por favor ingresa un n√∫mero v√°lido.")

        # Ciudad
        print("\nüìç UBICACI√ìN (datos reales del Excel)")
        print("-" * 35)
        for i, ciudad in enumerate(self.ciudades, 1):
            print(f"{i:2d}. {ciudad}")

        while True:
            try:
                opcion = int(input(f"\nSelecciona tu ciudad (1-{len(self.ciudades)}): "))
                if 1 <= opcion <= len(self.ciudades):
                    self.usuario_actual['ciudad'] = self.ciudades[opcion - 1]
                    break
                else:
                    print("‚ùå Opci√≥n inv√°lida. Intenta de nuevo.")
            except ValueError:
                print("‚ùå Por favor ingresa un n√∫mero v√°lido.")

    def mostrar_productos_disponibles(self):
        """Muestra cat√°logo de quesos reales"""
        print("\nüßÄ CAT√ÅLOGO DE QUESOS DISPONIBLES (DATOS REALES)")
        print("-" * 60)
        print(f"{'C√≥digo':<6} {'Producto':<25} {'Marca':<15} {'Peso':<15} {'Precio'}")
        print("-" * 60)
        for codigo, info in self.productos_quesos.items():
            nombre_corto = info['nombre'][:24] if len(info['nombre']) > 24 else info['nombre']
            marca_corta = info['marca'][:14] if len(info['marca']) > 14 else info['marca']
            print(f"{codigo:<6} {nombre_corto:<25} {marca_corta:<15} {info['peso']:<15} Bs. {info['precio']:>6.2f}")

    def recopilar_compra_anterior(self):
        """Recopila informaci√≥n de la √∫ltima compra"""
        print("\nüõí √öLTIMA COMPRA REALIZADA")
        print("-" * 30)
        print("Selecciona los quesos que compraste en tu √∫ltima visita:")

        self.mostrar_productos_disponibles()

        compras = []
        print(f"\nIngresa los c√≥digos de productos (ej: Q001,Q003,Q005) o 'ninguno':")
        entrada = input("C√≥digos: ").strip().upper()

        if entrada.lower() != 'ninguno':
            codigos = [c.strip() for c in entrada.split(',')]
            for codigo in codigos:
                if codigo in self.productos_quesos:
                    cantidad = self._solicitar_cantidad(codigo)
                    compras.append({
                        'codigo': codigo,
                        'nombre': self.productos_quesos[codigo]['nombre'],
                        'cantidad': cantidad,
                        'precio': self.productos_quesos[codigo]['precio'],
                        'categoria': self.productos_quesos[codigo]['categoria'],
                        'marca': self.productos_quesos[codigo]['marca'],
                        'peso': self.productos_quesos[codigo]['peso']
                    })
                else:
                    print(f"‚ö†Ô∏è C√≥digo {codigo} no existe")

        self.usuario_actual['ultima_compra'] = compras

        if compras:
            total = sum(item['cantidad'] * item['precio'] for item in compras)
            print(f"\nüìä Resumen de tu √∫ltima compra:")
            for item in compras:
                subtotal = item['cantidad'] * item['precio']
                print(f"   ‚Ä¢ {item['nombre']} ({item['peso']}): {item['cantidad']} unid. - Bs. {subtotal:.2f}")
            print(f"   üí∞ Total: Bs. {total:.2f}")
        else:
            print("   üìù Sin compras anteriores registradas")

    def _solicitar_cantidad(self, codigo):
        """Solicita cantidad de un producto"""
        while True:
            try:
                cantidad = int(input(f"   Cantidad de {self.productos_quesos[codigo]['nombre']}: "))
                if cantidad > 0:
                    return cantidad
                else:
                    print("   ‚ùå La cantidad debe ser mayor a 0")
            except ValueError:
                print("   ‚ùå Por favor ingresa un n√∫mero v√°lido")

    def mostrar_menu_recomendaciones(self):
        """Muestra opciones de recomendaci√≥n"""
        print("\nüéØ TIPOS DE RECOMENDACI√ìN DISPONIBLES")
        print("-" * 45)
        print("1. üçï Quesos ideales para un platillo espec√≠fico")
        print("2. üõí Productos recomendados para tu tipo de negocio")
        print("3. üìà Tendencias de quesos en tu sector")
        print("4. üîÆ Predicci√≥n de tu pr√≥xima compra")
        print("5. üé≠ Recomendaci√≥n personalizada h√≠brida")
        print("6. üìä An√°lisis completo de tu perfil")
        print("7. üì¶ Ver cat√°logo completo")
        print("0. üëã Salir")

    def generar_recomendacion_platillo(self):
        """Recomendaci√≥n tipo 1: Quesos para platillos (Filtrado Colaborativo)"""
        print("\nüçï RECOMENDACI√ìN POR PLATILLO")
        print("-" * 35)

        platillos = list(self.platillos_quesos.keys())
        for i, platillo in enumerate(platillos, 1):
            print(f"{i}. {platillo.title().replace('_', ' ')}")

        try:
            opcion = int(input(f"\nSelecciona el platillo (1-{len(platillos)}): "))
            if 1 <= opcion <= len(platillos):
                platillo = platillos[opcion - 1]
                keywords_platillo = self.platillos_quesos[platillo]

                print(f"\nüßÄ Quesos recomendados para {platillo.replace('_', ' ').title()}:")
                print("-" * 50)

                recomendaciones = []
                for codigo, info in self.productos_quesos.items():
                    # Verificar si el producto coincide con las keywords del platillo
                    relevancia = 0
                    for keyword in keywords_platillo:
                        if (keyword.lower() in info['nombre'].lower() or
                                keyword.lower() in info['categoria'].lower()):
                            relevancia += 1

                    if relevancia > 0:
                        score = self._calcular_score_colaborativo(codigo, platillo)
                        recomendaciones.append({
                            'codigo': codigo,
                            'nombre': info['nombre'],
                            'marca': info['marca'],
                            'peso': info['peso'],
                            'precio': info['precio'],
                            'score': score,
                            'relevancia': relevancia,
                            'razon': f"Ideal para {platillo.replace('_', ' ')}"
                        })

                # Ordenar por score y relevancia
                recomendaciones.sort(key=lambda x: (x['relevancia'], x['score']), reverse=True)

                if recomendaciones:
                    for i, rec in enumerate(recomendaciones[:5], 1):
                        print(f"{i}. {rec['nombre']} ({rec['marca']}) - {rec['peso']}")
                        print(f"   üí∞ Precio: Bs. {rec['precio']:.2f} | Score: {rec['score']:.2f}")
                        print(f"   üí° {rec['razon']}")
                        print()
                else:
                    print("No se encontraron productos espec√≠ficos para este platillo.")
                    print("Mostrando productos generales recomendados...")
                    self._mostrar_productos_generales(5)

            else:
                print("‚ùå Opci√≥n inv√°lida")
        except ValueError:
            print("‚ùå Por favor ingresa un n√∫mero v√°lido")

    def generar_recomendacion_por_segmento(self):
        """Recomendaci√≥n tipo 2: Por tipo de negocio (K-means)"""
        print("\nüè¢ RECOMENDACI√ìN POR TIPO DE NEGOCIO")
        print("-" * 40)

        # Determinar segmento basado en tipo de negocio
        segmento = self._determinar_segmento_kmeans()

        print(f"üìä Tu negocio ({self.usuario_actual['tipo_negocio']}) pertenece al segmento:")
        print(f"   üéØ {segmento['nombre']}")
        print(f"   üìù {segmento['descripcion']}")

        print(f"\nüßÄ Quesos m√°s populares en tu segmento:")
        print("-" * 45)

        recomendaciones = self._obtener_recomendaciones_segmento(segmento)

        for i, rec in enumerate(recomendaciones[:5], 1):
            print(f"{i}. {rec['nombre']} ({rec['marca']}) - {rec['peso']}")
            print(f"   üí∞ Precio: Bs. {rec['precio']:.2f}")
            print(f"   üìà Popularidad en segmento: {rec['popularidad']:.1f}%")
            print(f"   üíº {rec['razon']}")
            print()

    def generar_tendencias_sector(self):
        """Recomendaci√≥n tipo 3: Tendencias del sector"""
        print("\nüìà TENDENCIAS EN TU SECTOR")
        print("-" * 30)

        tipo_negocio = self.usuario_actual['tipo_negocio']

        # Generar tendencias basadas en productos reales
        tendencias = self._generar_tendencias_sector_reales(tipo_negocio)

        print(f"üìä Tendencias para {tipo_negocio}:")
        print("-" * 40)

        for i, tendencia in enumerate(tendencias, 1):
            print(f"{i}. {tendencia['producto']} ({tendencia['marca']})")
            print(f"   üìà Crecimiento estimado: {tendencia['crecimiento']}%")
            print(f"   üí∞ Precio: Bs. {tendencia['precio']:.2f}")
            print(f"   üéØ Raz√≥n: {tendencia['razon']}")
            print()

    def predecir_proxima_compra(self):
        """Predicci√≥n tipo 4: Pr√≥xima compra (Random Forest)"""
        print("\nüîÆ PREDICCI√ìN DE PR√ìXIMA COMPRA")
        print("-" * 35)

        # Calcular predicci√≥n basada en Random Forest
        prediccion = self._calcular_prediccion_rf()

        print(f"üìÖ Predicci√≥n para tu pr√≥xima visita:")
        print(f"   üóìÔ∏è Fecha estimada: {prediccion['fecha']}")
        print(f"   üí∞ Presupuesto estimado: Bs. {prediccion['presupuesto']:.2f}")
        print(f"   üéØ Confianza: {prediccion['confianza']}")

        print(f"\nüõí Productos que probablemente comprar√°s:")
        print("-" * 45)

        for i, producto in enumerate(prediccion['productos'], 1):
            print(f"{i}. {producto['nombre']} ({producto['marca']})")
            print(f"   üìä Probabilidad: {producto['probabilidad']:.1f}%")
            print(f"   üí∞ Precio: Bs. {producto['precio']:.2f}")

    def generar_recomendacion_hibrida(self):
        """Recomendaci√≥n tipo 5: H√≠brida (combina todos los algoritmos)"""
        print("\nüé≠ RECOMENDACI√ìN PERSONALIZADA H√çBRIDA")
        print("-" * 45)

        print("üîÑ Analizando tu perfil con todos los algoritmos...")

        # Combinar resultados de los tres algoritmos
        resultado_hibrido = self._calcular_score_hibrido()

        print(f"\nüìä An√°lisis de tu perfil:")
        print(f"   üè¢ Segmento: {resultado_hibrido['segmento']}")
        print(f"   üìà Nivel de actividad: {resultado_hibrido['actividad']}")
        print(f"   üéØ Tipo de comprador: {resultado_hibrido['tipo_comprador']}")

        print(f"\nüèÜ TOP 5 RECOMENDACIONES H√çBRIDAS:")
        print("-" * 40)

        for i, rec in enumerate(resultado_hibrido['recomendaciones'], 1):
            print(f"{i}. {rec['nombre']} ({rec['marca']}) - {rec['peso']}")
            print(f"   üí∞ Precio: Bs. {rec['precio']:.2f}")
            print(f"   üéØ Score h√≠brido: {rec['score_total']:.2f}")
            print(f"   üìä K-means: {rec['score_kmeans']:.1f} | RF: {rec['score_rf']:.1f} | CF: {rec['score_cf']:.1f}")
            print(f"   üí° {rec['justificacion']}")
            print()

    def analisis_completo_perfil(self):
        """An√°lisis completo del perfil del usuario"""
        print("\nüìä AN√ÅLISIS COMPLETO DE TU PERFIL")
        print("-" * 40)

        print("üîç Generando an√°lisis detallado...")

        # Informaci√≥n b√°sica
        print(f"\nüë§ INFORMACI√ìN PERSONAL:")
        print(f"   Nombre: {self.usuario_actual['nombre']} {self.usuario_actual['apellidos']}")
        print(f"   Negocio: {self.usuario_actual['tipo_negocio']}")
        print(f"   Ubicaci√≥n: {self.usuario_actual['ciudad']}")

        # An√°lisis de compras
        if self.usuario_actual['ultima_compra']:
            total_compra = sum(item['cantidad'] * item['precio'] for item in self.usuario_actual['ultima_compra'])
            marcas_compradas = set(item['marca'] for item in self.usuario_actual['ultima_compra'])
            categorias_compradas = set(item['categoria'] for item in self.usuario_actual['ultima_compra'])

            print(f"\nüõí AN√ÅLISIS DE COMPRAS:")
            print(f"   √öltima compra: Bs. {total_compra:.2f}")
            print(f"   Productos: {len(self.usuario_actual['ultima_compra'])}")
            print(f"   Marcas preferidas: {', '.join(marcas_compradas)}")
            print(f"   Categor√≠as: {', '.join(categorias_compradas)}")

        # Segmentaci√≥n
        segmento = self._determinar_segmento_kmeans()
        print(f"\nüéØ SEGMENTACI√ìN (K-means):")
        print(f"   Segmento: {segmento['nombre']}")
        print(f"   Caracter√≠sticas: {segmento['descripcion']}")

        # Predicciones
        prediccion = self._calcular_prediccion_rf()
        print(f"\nüîÆ PREDICCIONES (Random Forest):")
        print(f"   Pr√≥xima compra: {prediccion['fecha']}")
        print(f"   Presupuesto estimado: Bs. {prediccion['presupuesto']:.2f}")

        # Recomendaciones top
        resultado_hibrido = self._calcular_score_hibrido()
        print(f"\nüèÜ TOP 3 RECOMENDACIONES:")
        for i, rec in enumerate(resultado_hibrido['recomendaciones'][:3], 1):
            print(f"   {i}. {rec['nombre']} - Score: {rec['score_total']:.2f}")

    def mostrar_catalogo_completo(self):
        """Muestra el cat√°logo completo organizado"""
        print("\nüì¶ CAT√ÅLOGO COMPLETO DE PRODUCTOS")
        print("=" * 60)

        # Organizar por categor√≠as
        productos_por_categoria = {}
        for codigo, info in self.productos_quesos.items():
            categoria = info['categoria']
            if categoria not in productos_por_categoria:
                productos_por_categoria[categoria] = []
            productos_por_categoria[categoria].append((codigo, info))

        for categoria, productos in productos_por_categoria.items():
            print(f"\nüßÄ CATEGOR√çA: {categoria}")
            print("-" * 40)
            for codigo, info in productos:
                print(f"{codigo}: {info['nombre']} ({info['marca']})")
                print(f"      Peso: {info['peso']} | Precio: Bs. {info['precio']:.2f}")

    # M√©todos auxiliares para c√°lculos de algoritmos

    def _calcular_score_colaborativo(self, codigo_producto, contexto="general"):
        """Simula score de filtrado colaborativo"""
        base_score = 3.5
        info_producto = self.productos_quesos[codigo_producto]

        # Ajustar seg√∫n tipo de negocio
        tipo_bonus = {
            'PIZZERIA': 0.8 if 'bolita' in info_producto['categoria'].lower() or 'cheddar' in info_producto[
                'nombre'].lower() else 0.2,
            'RESTAURANTE': 0.6,
            'FRIAL': 0.5,
            'PUESTO DE MERCADO': 0.4,
            'TIENDA': 0.4
        }

        bonus = tipo_bonus.get(self.usuario_actual.get('tipo_negocio', ''), 0.3)

        # Ajustar seg√∫n compras anteriores
        if self.usuario_actual.get('ultima_compra'):
            marcas_compradas = [item['marca'] for item in self.usuario_actual['ultima_compra']]
            categorias_compradas = [item['categoria'] for item in self.usuario_actual['ultima_compra']]

            if info_producto['marca'] in marcas_compradas:
                bonus += 0.5
            if info_producto['categoria'] in categorias_compradas:
                bonus += 0.3

        return base_score + bonus + np.random.normal(0, 0.3)

    def _determinar_segmento_kmeans(self):
        """Determina segmento basado en tipo de negocio (K-means)"""
        tipo_negocio = self.usuario_actual['tipo_negocio']

        segmentos = {
            'PIZZERIA': {
                'nombre': 'Premium de Alto Volumen',
                'descripcion': 'Establecimientos especializados con alta frecuencia de compra'
            },
            'RESTAURANTE': {
                'nombre': 'Frecuentes Especializados',
                'descripcion': 'Negocios gastron√≥micos con compras especializadas'
            },
            'FRIAL': {
                'nombre': 'Mayoristas',
                'descripcion': 'Comerciantes con volumen medio-alto y variedad'
            },
            'PUESTO DE MERCADO': {
                'nombre': 'Mayoristas',
                'descripcion': 'Comerciantes con volumen medio-alto y variedad'
            },
            'TIENDA': {
                'nombre': 'Mayoristas',
                'descripcion': 'Comerciantes con volumen medio-alto y variedad'
            }
        }

        return segmentos.get(tipo_negocio, {
            'nombre': 'Emergentes',
            'descripcion': 'Negocios nuevos con potencial de crecimiento'
        })

    def _obtener_recomendaciones_segmento(self, segmento):
        """Obtiene recomendaciones basadas en segmento"""
        recomendaciones = []

        # Seleccionar productos seg√∫n segmento
        if 'Premium' in segmento['nombre']:
            # Productos premium (marcas reconocidas y mayor precio)
            productos_candidatos = [codigo for codigo, info in self.productos_quesos.items()
                                    if
                                    info['marca'] in ['HOLANDESA', 'SAN JAVIER', 'LA RIBERA'] or info['precio'] > 100]
        elif 'Mayoristas' in segmento['nombre']:
            # Productos de volumen (barras y presentaciones grandes)
            productos_candidatos = [codigo for codigo, info in self.productos_quesos.items()
                                    if 'barra' in info['categoria'].lower() or 'kg' in info['peso'].lower()]
        else:
            # Productos b√°sicos (bolitas y laminados)
            productos_candidatos = [codigo for codigo, info in self.productos_quesos.items()
                                    if 'bolita' in info['categoria'].lower() or 'laminado' in info['categoria'].lower()]

        for codigo in productos_candidatos[:5]:
            info = self.productos_quesos[codigo]
            recomendaciones.append({
                'codigo': codigo,
                'nombre': info['nombre'],
                'marca': info['marca'],
                'peso': info['peso'],
                'precio': info['precio'],
                'popularidad': np.random.uniform(60, 90),
                'razon': f"Popular en segmento {segmento['nombre']}"
            })

        return recomendaciones

    def _generar_tendencias_sector_reales(self, tipo_negocio):
        """Genera tendencias para el sector usando productos reales"""
        tendencias_base = {
            'PIZZERIA': ['Q002', 'Q004', 'Q009'],  # Holandesa bolita, cheddar, cristy cheddar
            'RESTAURANTE': ['Q017', 'Q011', 'Q003'],  # San javier bloque, la ribera, holandesa barra
            'FRIAL': ['Q006', 'Q013', 'Q014'],  # Cristy barra, la maravilla, santa rosa
            'PUESTO DE MERCADO': ['Q005', 'Q012', 'Q019'],  # Cristy bolita, chiquitano, chiquitano pvc
        }

        productos_tendencia = tendencias_base.get(tipo_negocio, ['Q001', 'Q005', 'Q007'])

        tendencias = []
        razones = [
            'Mayor demanda por calidad premium',
            'Tendencia hacia productos artesanales',
            'Preferencia por presentaciones familiares',
            'Crecimiento en segmento gourmet',
            'Aumento en ventas de temporada'
        ]

        for codigo in productos_tendencia:
            if codigo in self.productos_quesos:
                info = self.productos_quesos[codigo]
                tendencias.append({
                    'codigo': codigo,
                    'producto': info['nombre'],
                    'marca': info['marca'],
                    'precio': info['precio'],
                    'crecimiento': np.random.randint(8, 25),
                    'razon': np.random.choice(razones)
                })

        return tendencias

    def _calcular_prediccion_rf(self):
        """Simula predicci√≥n de Random Forest"""
        # Calcular d√≠as hasta pr√≥xima compra
        dias_siguiente_compra = np.random.randint(7, 21)  # 1-3 semanas
        fecha_proxima = datetime.now() + timedelta(days=dias_siguiente_compra)

        # Calcular presupuesto basado en √∫ltima compra y tipo de negocio
        if self.usuario_actual.get('ultima_compra'):
            total_anterior = sum(item['cantidad'] * item['precio'] for item in self.usuario_actual['ultima_compra'])
            factor = np.random.uniform(0.8, 1.3)
        else:
            # Presupuesto t√≠pico por tipo de negocio
            presupuestos_tipo = {
                'PIZZERIA': (200, 500),
                'RESTAURANTE': (300, 600),
                'FRIAL': (400, 800),
                'PUESTO DE MERCADO': (150, 400),
                'TIENDA': (100, 300)
            }
            rango = presupuestos_tipo.get(self.usuario_actual['tipo_negocio'], (100, 300))
            total_anterior = np.random.uniform(rango[0], rango[1])
            factor = 1.0

        presupuesto = total_anterior * factor

        # Productos probables basados en perfil
        productos_probables = []
        segmento = self._determinar_segmento_kmeans()
        recomendaciones_segmento = self._obtener_recomendaciones_segmento(segmento)

        for rec in recomendaciones_segmento[:5]:
            productos_probables.append({
                'codigo': rec['codigo'],
                'nombre': rec['nombre'],
                'marca': rec['marca'],
                'precio': rec['precio'],
                'probabilidad': np.random.uniform(40, 80)
            })

        return {
            'fecha': fecha_proxima.strftime('%Y-%m-%d'),
            'presupuesto': presupuesto,
            'confianza': np.random.choice(['Alta', 'Media'], p=[0.7, 0.3]),
            'productos': productos_probables
        }

    def _calcular_score_hibrido(self):
        """Calcula score h√≠brido combinando los tres algoritmos"""
        segmento = self._determinar_segmento_kmeans()

        recomendaciones = []

        for codigo, info in self.productos_quesos.items():
            # Score K-means (basado en segmento)
            score_kmeans = self._score_por_segmento(codigo, segmento)

            # Score Random Forest (basado en predicci√≥n)
            score_rf = self._score_prediccion_rf(codigo)

            # Score Filtrado Colaborativo
            score_cf = self._calcular_score_colaborativo(codigo)

            # Score h√≠brido ponderado
            score_total = (0.4 * score_kmeans + 0.3 * score_rf + 0.3 * score_cf)

            justificacion = self._generar_justificacion(codigo, score_kmeans, score_rf, score_cf)

            recomendaciones.append({
                'codigo': codigo,
                'nombre': info['nombre'],
                'marca': info['marca'],
                'peso': info['peso'],
                'precio': info['precio'],
                'score_kmeans': score_kmeans,
                'score_rf': score_rf,
                'score_cf': score_cf,
                'score_total': score_total,
                'justificacion': justificacion
            })

        # Ordenar por score total
        recomendaciones.sort(key=lambda x: x['score_total'], reverse=True)

        return {
            'segmento': segmento['nombre'],
            'actividad': np.random.choice(['Alta', 'Media', 'Baja'], p=[0.4, 0.4, 0.2]),
            'tipo_comprador': np.random.choice(['Conservador', 'Aventurero', 'Pragm√°tico']),
            'recomendaciones': recomendaciones[:5]
        }

    def _score_por_segmento(self, codigo, segmento):
        """Calcula score basado en segmento K-means"""
        info = self.productos_quesos[codigo]
        base = 3.0

        if 'Premium' in segmento['nombre']:
            # Productos premium tienen mayor score
            if info['precio'] > 150 or info['marca'] in ['HOLANDESA', 'SAN JAVIER']:
                return base + 1.5
            else:
                return base + 0.5
        elif 'Mayoristas' in segmento['nombre']:
            # Productos de volumen
            if 'barra' in info['categoria'].lower() or 'kg' in info['peso'].lower():
                return base + 1.2
            else:
                return base + 0.3
        else:
            return base + 0.5

    def _score_prediccion_rf(self, codigo):
        """Calcula score basado en predicci√≥n RF"""
        info = self.productos_quesos[codigo]
        base = 3.0

        # Ajustar seg√∫n marca y categor√≠a popular
        if info['marca'] in ['CRISTY', 'HOLANDESA']:
            base += 0.5
        if 'bolita' in info['categoria'].lower() or 'laminado' in info['categoria'].lower():
            base += 0.3

        return base + np.random.uniform(-0.5, 0.5)

    def _generar_justificacion(self, codigo, score_k, score_rf, score_cf):
        """Genera justificaci√≥n para la recomendaci√≥n"""
        info = self.productos_quesos[codigo]

        justificaciones = [
            f"Ideal para tu segmento de negocio",
            f"Marca {info['marca']} muy popular",
            f"Categor√≠a {info['categoria']} en tendencia",
            f"Excelente relaci√≥n calidad-precio",
            f"Presentaci√≥n {info['peso']} muy demandada",
            f"Producto vers√°til para m√∫ltiples usos"
        ]
        return np.random.choice(justificaciones)

    def _mostrar_productos_generales(self, cantidad):
        """Muestra productos generales cuando no hay coincidencias espec√≠ficas"""
        productos_populares = list(self.productos_quesos.items())[:cantidad]
        for i, (codigo, info) in enumerate(productos_populares, 1):
            print(f"{i}. {info['nombre']} ({info['marca']}) - {info['peso']}")
            print(f"   üí∞ Precio: Bs. {info['precio']:.2f}")

    def ejecutar_menu_principal(self):
        """Ejecuta el men√∫ principal del sistema"""
        while True:
            self.mostrar_menu_recomendaciones()

            try:
                opcion = int(input("\nüéØ Selecciona una opci√≥n (0-7): "))

                if opcion == 0:
                    print(f"\nüëã ¬°Gracias {self.usuario_actual['nombre']}! Vuelve pronto por m√°s recomendaciones üßÄ")
                    break
                elif opcion == 1:
                    self.generar_recomendacion_platillo()
                elif opcion == 2:
                    self.generar_recomendacion_por_segmento()
                elif opcion == 3:
                    self.generar_tendencias_sector()
                elif opcion == 4:
                    self.predecir_proxima_compra()
                elif opcion == 5:
                    self.generar_recomendacion_hibrida()
                elif opcion == 6:
                    self.analisis_completo_perfil()
                elif opcion == 7:
                    self.mostrar_catalogo_completo()
                else:
                    print("‚ùå Opci√≥n inv√°lida. Intenta de nuevo.")

                if opcion != 0:
                    input("\nüì± Presiona Enter para continuar...")

            except ValueError:
                print("‚ùå Por favor ingresa un n√∫mero v√°lido.")
            except KeyboardInterrupt:
                print(f"\n\nüëã ¬°Hasta luego {self.usuario_actual.get('nombre', '')}!")
                break


def main():
    """Funci√≥n principal"""
    print("üßÄ SISTEMA H√çBRIDO DE RECOMENDACI√ìN DE QUESOS")
    print("=" * 50)
    print("üìä DATOS REALES CARGADOS:")
    print("   ‚Ä¢ 20 productos √∫nicos del Excel")
    print("   ‚Ä¢ 10 tipos de negocio reales")
    print("   ‚Ä¢ 4 ciudades de Bolivia")
    print("   ‚Ä¢ Algoritmos: Random Forest + K-means + Filtrado Colaborativo")
    print("=" * 50)

    sistema = SistemaHibridoQuesos()

    try:
        sistema.mostrar_bienvenida()
        sistema.recopilar_datos_usuario()
        sistema.recopilar_compra_anterior()

        print(f"\n‚úÖ ¬°Perfil configurado correctamente!")
        print(f"   üë§ Usuario: {sistema.usuario_actual['nombre']} {sistema.usuario_actual['apellidos']}")
        print(f"   üè¢ Negocio: {sistema.usuario_actual['tipo_negocio']} en {sistema.usuario_actual['ciudad']}")

        sistema.ejecutar_menu_principal()

    except KeyboardInterrupt:
        print("\n\nüëã ¬°Hasta luego! Vuelve pronto por m√°s recomendaciones üßÄ")
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        print("üîß Por favor contacta al soporte t√©cnico.")


if __name__ == "__main__":
    main()